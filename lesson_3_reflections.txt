When would you want to use a remote repository rather than keeping all your
work local?

    You would want to use a remote repository to be able to work with other
    collaborators, and also to be able to work easily on multiple different
    computers.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

	If you were working on a project with several contributors then keeping
	changes manual would simplify things as you wouldn't constantly be trying
	to follow other people's changes. It also allows you to work on something
	that isn't ready yet without upsetting other people's work.

Describe the differences between forks, clones, and branches. When would you
use one instead of another?

	A clone is a copy of a repository either on your local machine, or to/from
	GitHub. A fork is a copy of a repository on GitHub only. A branch is a
	separate set of commits other than the master, which would be used when you
	wanted to keep experimental changes separate from the main branch.

What is the benefit of having a copy of the last known state of the remote
stored locally?

	It lets you continue working on something knowing that you are doing so on
	the latest version. Also it should make it easier to merge in the future.

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

	I would probably try to collaborate using email or some instant messaging
	program. This would make it easier to keep up to date on what others were
	doing but much harder to see the history of changes people have made.

When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?

	If you were making changes that were experimental or in addition to the
	main program you could do them in a separate branch until they worked well.
	Then the complete change could be merged later with the master branch. This
	is better in terms of making changes that you know won't break the main
	program, but adds the complexity of merging later.
